#!/usr/bin/env python

from gpioone import *
from time import sleep
import math

class MPU6050(I2C):
    def __init__(self, device_address=0x68):
        super(MPU6050, self).__init__(device_address)

        whoami = self.read_byte_data('WHO_AM_I')

        if whoami != 0x68:
            raise RuntimeError("WHO_AM_I check failed. Is device hooked up?")

        sleep_status = self.read_byte_data('PWR_MGMT_1')

        if sleep_status & 0x64:
            print("Device Sleeping, will wake up!")
            self.write_byte_data('PWR_MGMT_1', 0x01)
            self.write_byte_data('ACCEL_CONFIG', 24)
        else:
            print("Device already Woke!")
        
    # https://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Register-Map1.pdf
    def registers(self):
        return {
        'SELF_TEST_A': 0x16,
            'ACCEL_CONFIG': 0x1C,
            'ACCEL_XOUT_H': 0x3B,
            'ACCEL_XOUT_L': 0x3C,
            'ACCEL_YOUT_H': 0x3D,
            'ACCEL_YOUT_L': 0x3E,
            'ACCEL_ZOUT_H': 0x3F,
            'ACCEL_ZOUT_L': 0x40,

            'TEMP_OUT_H': 0x41,
            'TEMP_OUT_L': 0x42,

            'GYRO_XOUT_H': 0x43,
            'GYRO_XOUT_L': 0x44,
            'GYRO_YOUT_H': 0x45,
            'GYRO_YOUT_L': 0x46,
            'GYRO_ZOUT_H': 0x47,
            'GYRO_ZOUT_L': 0x48,
    
            'PWR_MGMT_1':  0x6B,
            'PWR_MGMT_2':  0x6C,
    
            'WHO_AM_I': 0x75,
        }

    def get_word(self, register):
        h = self.read_byte_data(register + "_H")
        l = self.read_byte_data(register + "_L")
        word = (h << 8) + l

        if word >= (1 << 15):
            i = -(0xFFFF - word + 1)
        else:
            i = word

        return i

    def get_accel_angles(self):
        saved_values = {}
        for value in ["TEMP_OUT", "GYRO_XOUT", "GYRO_YOUT", "GYRO_ZOUT",
                      "ACCEL_XOUT", "ACCEL_YOUT", "ACCEL_ZOUT"]:
            word = self.get_word(value)

            saved_values[value] = word

        x = float(saved_values["ACCEL_XOUT"])
        y = float(saved_values["ACCEL_YOUT"])
        z = float(saved_values["ACCEL_ZOUT"])

        normalizing_factor = math.sqrt(x*x + y*y + z*z)

        x_norm = x / normalizing_factor
        y_norm = y / normalizing_factor
        z_norm = z / normalizing_factor

        x_angle = math.degrees(math.atan2(math.sqrt(y_norm*y_norm + z_norm*z_norm), x_norm))
        y_angle = math.degrees(math.atan2(math.sqrt(x_norm*x_norm + z_norm*z_norm), y_norm))
        z_angle = math.degrees(math.atan2(math.sqrt(x_norm*x_norm + y_norm*y_norm), z_norm))

        return (x_angle, y_angle, z_angle)

    def sleep(self):
        self.write_byte_data('PWR_MGMT_1', 0x64)

    def __del__(self):
        self.sleep()

if __name__ == "__main__":
        
    try:
        mpu = MPU6050()
        x_ref, y_ref, z_ref = mpu.get_accel_angles()
        while 1:
            x_angle, y_angle, z_angle = mpu.get_accel_angles()
            print("%f %f %f %f" % (x_angle, y_angle, z_angle, (x_angle + y_angle + z_angle)))
            print("%f %f %f %f" % (x_angle - x_ref, y_angle - y_ref, z_angle - z_ref, (x_angle + y_angle + z_angle - x_ref - y_ref - z_ref)))
            print()
                               
                               
            sleep(5.0)
    except KeyboardInterrupt:
        pass

                    
